<snippet>
	<content><![CDATA[
    
		bool p2(ll n)
{
    if(n==0)
        return false;
 
    return (ceil(log2(n)) == floor(log2(n)));
}
ll ck(ll x, ll y){
  if(x<0 || x>=n || y<0 || y>=m) rr 1;
  rr 0;
}


ll modd(ll a){
      return ((a%mod)+mod)%mod;
}

ll sub(ll a ,ll b)
{
    return modd(modd(a) - modd(b));
}
ll add(ll a, ll b)
{
   modd(modd(a) + modd(b));
}
ll mul(ll a, ll b){
  return modd(modd(a)*modd(b));
}
ll binpow(ll a, ll b, ll md){
  ll ans = 1;
  while(b){
    if(b&1) ans*=a;
    a*=a;
    ans%=md;
    a%=md;
    b/=2;
  }
  return ans;
}

  ll fact[N], invfact[N];
void init()
{
   fact[0] = fact[1] = 1;
    int i;
    for (i = 2; i < N; i++)
        fact[i] = (fact[i - 1] * 1ll * i) % mod;
    i--;
    
    invfact[i] = binpow(fact[i], mod - 2, mod);
    for (i--; i >= 0; i--)
        invfact[i] = (invfact[i + 1] * 1ll * (i + 1)) % mod;
}
 
ll ncr(ll n, ll r)
{
    if (r > n || n < 0 || r < 0)
        return 0;
    return mul(fact[n], mul(invfact[r], invfact[n - r]));
}

ll ncr[N][N];
ll nCr(){
    ncr[1][1] = 1;
    ncr[1][0] = 1;
    f(i,2,N){
      ncr[i][0] = 1;
      ncr[i][i] = 1;
      f(j,1,i){
        ncr[i][j] = (ncr[i-1][j-1]+ncr[i-1][j])%mod;
      }
    }
} 
ll modd(ll a){
      return ((a%mod)+mod)%mod;
}

ll substract(ll a ,ll b)
{
    return modd(modd(a) - modd(b));
}
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
auto dist=uniform_int_distribution<int>(l,r);

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>exclude</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope> 
</snippet>
