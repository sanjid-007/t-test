<snippet>
	<content><![CDATA[
struct scc {
  vector<vector<ll> > edges, redges;
  vector<bool> used;
  vector<ll> order, component;
  ll n;
 
  void init(ll _n) {
    n = _n;
    edges = vector<vector<ll> >(n);
    redges = vector<vector<ll> >(n);
    order.clear();
    component.clear();
  }
 
  void edge(ll u, ll v) {
    edges[u].push_back(v);
    redges[v].push_back(u);
  }
 
  void dfs1(ll v) {
    used[v] = true;
    for (ll i = 0; i < edges[v].size(); i++) {
      if (!used[edges[v][i]]) {
        dfs1(edges[v][i]);
      }
    }
    order.push_back(v);
  }
 
  void dfs2(ll v) {
    used[v] = true;
    component.push_back(v);
    for (ll i = 0; i < redges[v].size(); i++) {
      if (!used[redges[v][i]]) {
        dfs2(redges[v][i]);
      }
    }
  }
 
  vector<vector<ll> > run() {
    vector<vector<ll> > components;
    used.assign(n, false);
    for (ll i = 0; i < n; i++) {
      if (!used[i]) {
        dfs1(i);
      }
    }
 
    used.assign(n, false);
    for (ll i = 0; i < n; i++) {
      ll v = order[n - 1 - i];
      if (!used[v]) {
        dfs2(v);
        components.push_back(component);
        component.clear();
      }
    }
 
    return components;
  }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>SCC</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope> 
</snippet>
