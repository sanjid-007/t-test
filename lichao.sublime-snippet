<snippet>
	<content><![CDATA[
struct line {
    ll m, c;

    line(ll _m = 0, ll _c = inf) : m(_m), c(_c) {

    }

    ll operator()(ll x) const {
        return m * x + c;
    }
};
class lct {
public:
    vector<line> tree;
    ll n;

    lct(ll _n) : n(_n) {
        tree.resize(4 * n + 1);
    }

    ll sgn(ll x) {
        if (x == 0) return 0;
        if (x < 0) return -1;
        return 1;
    }

    void upd(ll i, ll s, ll e, line l) {
        if (s == e) {
            if (l(s) < tree[i](s)) {
                tree[i] = l;
            }
            return;
        }
        ll m = (s + e) / 2;

        ll fir = (l(s) - tree[i](s));
        ll sec = (l(m) - tree[i](m));
        if (sgn(fir) * sgn(sec) <= 0) {
            if (l(e) < tree[i](e))
                swap(tree[i], l);
            upd(2 * i, s, m, l);

        } else {
            if (l(m) < tree[i](m)) {
                swap(tree[i], l);
            }
            upd(2 * i + 1, m + 1, e, l);

        }
    }

    void upd(line l) {
        upd(1, 0, n - 1, l);
    }

    ll qry(ll i, ll s, ll e, ll x) {
        if (s == e) {
            return tree[i](x);
        }
        ll m = (s + e) / 2;
        if (x <= m)
            return min({tree[i](x), qry(2 * i, s, m, x)});
        else
            return min({tree[i](x), qry(2 * i + 1, m + 1, e, x)});
    }

    ll qry(ll x) {
        return qry(1, 0, n - 1, x);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>LICHAO</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope> 
</snippet>
