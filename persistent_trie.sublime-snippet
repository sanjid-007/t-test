<snippet>
	<content><![CDATA[
map<ll,ll>root;

struct node {
    ll left = 0, right = 0;
    ll cnt = 0;
};
node a[9000001];
ll ptr=2;
struct p_trie{
    p_trie() {
        root[0] = 1;
    }
    void insert(ll par_id,ll curr_id,ll k){
        root[curr_id]=ptr++;
        ll par_node=root[par_id];
        ll curr_node=root[curr_id];
        for(ll i=30;i>=0;i--){
            if((k&(1ll<<i))) {
                a[curr_node].left = a[par_node].left;
                a[curr_node].right = ptr++;
                curr_node = a[curr_node].right;
                par_node = a[par_node].right;
            }else{
                a[curr_node].right=a[par_node].right;
                a[curr_node].left=ptr++;
                curr_node=a[curr_node].left;
                par_node=a[par_node].left;
            }
            a[curr_node].cnt=a[par_node].cnt+1;
        }
    }
    ll max_xor(ll id,ll k){
        ll curr=root[id];
        ll ans=0;
        for(ll i=30;i>=0;i--){
            if((k&(1ll<<i))){
                if(a[curr].left){
                    ans|=(1ll<<i);
                    curr=a[curr].left;
                }else{
                    curr=a[curr].right;
                }
            }else{
                if(a[curr].right){
                    ans|=(1ll<<i);
                    curr=a[curr].right;
                }else{
                    curr=a[curr].left;
                }
            }
        }
        return ans;
    }
    ll min_xor(ll id,ll k){
        ll curr=root[id];
        ll ans=0;
        for(ll i=30;i>=0;i--){
            if((k&(1ll<<i))){
                if(a[curr].right){
                    curr=a[curr].right;
                }else{
                    ans|=(1ll<<i);
                    curr=a[curr].left;
                }
            }else{
                if(a[curr].left){
                    curr=a[curr].left;
                }else{
                    ans|=(1ll<<i);
                    curr=a[curr].right;
                }
            }
        }
        return ans;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>P_TRIE</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope> 
</snippet>
