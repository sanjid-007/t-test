<snippet>
	<content><![CDATA[
struct DSU
{
	int connected;
	int sz[N];
	pair<int, int> par[N]; //stores <parent, parity of distance from parent>
	vector<int> changes;
 
	void init(int n) 
	{
		for(int i=1;i<=n;i++)
		{
			par[i]={i, 0};
			sz[i]=1;
		}
		connected=n;
	}
 
	pair<int, int> getPar(int x)
	{
		if(par[x].first==x)
			return par[x];
		pair<int, int> p = getPar(par[x].first);
		p.second ^= par[x].second;
		return p;
	}
 
	bool unite(int u, int v) //Returns 1 if the graph is no longer bipartite
	{
		pair<int, int> x=getPar(u), y=getPar(v);
		if(x.first==y.first)
		{
			if(x.second==y.second)
				return 1;
			changes.push_back(-1);
			return 0;
		}
 
		connected--;
 
		if(sz[x.first] < sz[y.first])
			swap(x, y);
		par[y.first]={x.first, 1^x.second^y.second};
		sz[x.first]+=sz[y.first];
		changes.push_back(y.first);
		return 0;
	}
 
	void undo() //Reversed the previous performed operation
	{
		if(!changes.size())
			return;
		if(changes.back()!=-1)
		{
			int x=changes.back();
			sz[par[x].first]-=sz[x];
			par[x]={x, 0};
		}
		changes.pop_back();
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>ROLL_DSU</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
